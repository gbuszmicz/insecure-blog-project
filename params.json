{
  "name": "Insecure-blog-project",
  "tagline": "Insecure Web application for testing security and training",
  "body": "\r\n# Insecure Blog Project\r\nThis is an insecure Web application for training and testing Web security. It has multiple vulnerabilities for you to find.\r\n\r\n<p align=\"center\">\r\n  <img src =\"https://raw.githubusercontent.com/gbuszmicz/insecure-blog-project/master/public/images/screenshot.png\" />\r\n</p>\r\n## Demo\r\nCheck it out the [demo](http://insecureblog.herokuapp.com/) online. Have fun playing around. And please don't break anything!\r\n\r\nI will keep uploading new vulnerabilities. I´ll try to cover all [OWASP Top 10 Common Vulnerabilities](https://www.owasp.org/index.php/Top_10_2013-Top_10), or at least most of them.\r\n\r\n## Installation\r\n#### Clone the repo\r\n```shell\r\n$ git clone https://github.com/gbuszmicz/insecure-blog-project.git myApp\r\n$ cd myApp\r\n$ npm install  # Install Node.js components listed in ./package.json\r\n```\r\n\r\n#### Create a production environment file\r\nIf you are planning on running this app in production mode you have to create a file storing all the information about your db:\r\n```shell\r\nenv/production.json\r\n```\r\n\r\nThe *production.json* file has the same structure that env/development.json file plus *redis* information. For example:\r\n```javascript\r\n{\r\n  \"mysql\": {\r\n    \"_comment\": \"MySQL database running in production mode\",\r\n    \"host\": \"somepublichost.cloud.com\",\r\n    \"port\": \"33306\",\r\n    \"user\": \"root\",\r\n    \"password\": \"superSecretPassword\",\r\n    \"database\": \"insecure_blog\"\r\n  },\r\n  \"redis\": {\r\n    \"_comment\": \"Redis to go for production\",\r\n    \"host\": \"asjdklasdjlakñsdjañl.redistogo.com\",\r\n    \"port\": \"10460\",\r\n    \"pass\": \"8192301j1239123jio121\",\r\n    \"url\": \"redis://redistogo:8192301j1239123jio121@viperfish.redistogo.com:10460/\"\r\n   }\r\n}\r\n```\r\n\r\n#### Starting the app\r\nThe app use [foreman](https://github.com/strongloop/node-foreman). To start it just run:\r\n```shell\r\n$ foreman start\r\n```\r\n\r\nYou can also start the app without foreman:\r\n```shell\r\n$ node index.js\r\n```\r\n\r\n## User guide / Challenges\r\n#### SQL injection (SQLi)\r\n\r\n##### What is this vulnerability about\r\n\r\nA [SQL injection](https://www.owasp.org/index.php/SQL_Injection) attack consists of insertion or \"injection\" of a SQL query via the input data from the client to the application. A successful SQL injection exploit can read sensitive data from the database, modify database data (Insert/Update/Delete), execute administration operations on the database (such as shutdown the DBMS), recover the content of a given file present on the DBMS file system and in some cases issue commands to the operating system. SQL injection attacks are a type of injection attack, in which SQL commands are injected into data-plane input in order to effect the execution of predefined SQL commands.\r\n\r\n**The challenge** \r\n> - **a.** **Test** the app for **SQLi vulnerabilities** {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/a.Testing_vulnerability.md)},\r\n> - **b.** Try to get the **database version** and **name**. Also get the **user** {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/b.Get_database_version.md)},\r\n> - **c.** Try to get the **password** for the **database** connector **user** (*mysql.user*) {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/c.Password_database_user.md)},\r\n> - **d.** Get **all the databases** in the server (database engine) {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/d.Get_all_databases.md)},\r\n> - **e.** Get **all the tables** for the app database {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/e.Get_all_tables.md)},\r\n> - **f.** Get **all the columns** for the table storing the app users {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/f.Get_users_columns.md)},\r\n> - **g.** Get **username** and **password** of the app administrator {[answer here](https://github.com/gbuszmicz/insecure-blog-project/blob/master/challenges/SQLi/g.Get_app_administrator.md)},\r\n> - **h.** Finally **login** into the app with the administrator credentials\r\n\r\n##### How to fix it\r\n\r\n**Solution #1: escape the input.**\r\n\r\nTo fix this vulnerability you have to **escape** the user input **before** pass it to the database. Most database's clients have some sort of **escape function** to accomplish this. \r\nYou can also do it yourself, you only need to know what type of value you are getting from the view or any untrusted source. \r\n[Underscore.js](http://underscorejs.org/) is a good library for this.\r\n\r\n```javascript\r\n// This code is from controllers/ctlPost.js\r\n// db.escape(user input). This is from node-mysql\r\n// db is the mysql connection instance. Check helpers/mysql.js file for more details\r\n//\r\n// var postId = req.params.postid; // => Old unescaped var!!\r\nvar postId = db.escape(req.params.postid); // New and beautiful escaped var!!\r\nvar sql = \"SELECT posts.id, title, body, date, tags, username, firstname, lastname, avatar \"+\r\n          \"FROM posts INNER JOIN users ON posts.userId = users.id \"+\r\n          \"WHERE posts.id = \" +postId;\r\ndb.query(sql, function(err, post) { \r\n  ... \r\n})\r\n```\r\n\r\n**Solution #2: parameterized SQL queries.**\r\n\r\nParameterize SQL queries is an even better way to secure your application. Instead of building a SQL statement using concatenation, we let a function replace the parameters within the statement and perform sanitation.\r\n\r\n```javascript\r\n// This code is from controllers/ctlPost.js\r\nvar postId = req.params.postid; \r\nvar sql = \"SELECT posts.id, title, body, date, tags, username, firstname, lastname, avatar \"+\r\n          \"FROM posts INNER JOIN users ON posts.userId = users.id \"+\r\n          \"WHERE posts.id = ?\";\r\ndb.query(sql, [postId], function(err, post) { \r\n  ... \r\n})\r\n```\r\n\r\n##### More about MySQL Injection\r\n\r\n- [OWASP - SQL injection](https://www.owasp.org/index.php/SQL_Injection)\r\n- [W3School - SQL Injection](http://www.w3schools.com/sql/sql_injection.asp)\r\n- [Acunetix- SQL Injection (SQLi)](http://www.acunetix.com/websitesecurity/sql-injection/)\r\n- [Pentestmonkey - MySQL SQL Injection Cheat Sheet](http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet)\r\n- [Pentestmonkey - MSSQL Injection Cheat Sheet](http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet)\r\n- [Pentestmonkey - Postgres SQL Injection Cheat Sheet](http://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet)\r\n\r\n\r\n## Credits\r\nThis **README.md** was made with [Stackedit.io](https://stackedit.io/editor)\r\n\r\n\r\n## Be a part of the project\r\nIf you want to submit some code with **vulnerabilities**, or may be try **React** for the views, or pretty much anything you might think, please contact me on [twitter](https://twitter.com/gbuszmicz)\r\n\r\n\r\n## Questions and issues\r\nFeel free to contact me on [twitter](https://twitter.com/gbuszmicz) or [create an issue](https://github.com/gbuszmicz/insecure-blog-project/issues/new)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}