# ************************************************************
# Sequel Pro SQL dump
# Version 4541
#
# http://www.sequelpro.com/
# https://github.com/sequelpro/sequelpro
#
# Host: localhost (MySQL 5.7.12)
# Database: insecure_blog
# Generation Time: 2016-05-28 23:15:04 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table posts
# ------------------------------------------------------------

DROP TABLE IF EXISTS `posts`;

CREATE TABLE `posts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` text,
  `body` text,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `userId` int(11) unsigned DEFAULT NULL,
  `status` varchar(20) DEFAULT 'Draft',
  `tags` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;

INSERT INTO `posts` (`id`, `title`, `body`, `date`, `userId`, `status`, `tags`)
VALUES
	(22,'Node.js security configurations','<p>S<b>ecurity - the elephant in the room</b>. Everyone agrees that it is very important but few takes it seriously. We at RisingStack want you to do it right, this is why we have put together this checklist to help you guide through the must have security checks before your application is enabled to thousands of users/customers.</p><p>Most of these items are general and applies to all languages and frameworks not just Node.js - however some of the tools presented are Node.js specific. You should also check our introductory Node.js security blogpost.</p><h3>Security HTTP Headers</h3><p>There are some security-related HTTP headers that your site should set. These headers are:</p><p></p><ul><li><span style=\"line-height: 1.5; font-size: 2rem;\"><b>Strict-Transport-Security</b> enforces secure (HTTP over SSL/TLS) connections to the server</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\"><b>X-Frame-Options</b> provides clickjacking protection</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\"><b>X-XSS-Protection</b> enables the Cross-site scripting (XSS) filter built into most recent web browsers</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\"><b>X-Content-Type-Options</b> prevents browsers from MIME-sniffing a response away from the declared content-type</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\"><b>Content-Security-Policy</b> prevents a wide range of attacks, including Cross-site scripting and other cross-site injections</span></li></ul><h3>Sensitive Data on the Client Side</h3><p></p><p>When deploying front end applications make sure that you never expose API secrets and credentials in your source code, as it will be readable by anyone.</p><p>There is no good way to check this automatically, but you have a couple of options to mitigate the risk of accidentally exposing sensitive data on the client side:</p><p></p><ul><li><span style=\"line-height: 1.5; font-size: 2rem;\">use of pull requests</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">regular code reviews</span><br></li></ul><p><span style=\"line-height: 1.5; font-size: 2rem;\"><br></span></p><p><span style=\"line-height: 1.5; font-size: 2rem;\">Published by </span><a href=\"https://blog.risingstack.com/author/gergely/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">Gergely Nemeth</a><span style=\"line-height: 1.5; font-size: 2rem;\">,&nbsp;</span><span style=\"line-height: 1.5; font-size: 2rem;\"></span><a href=\"http://blog.risingstack.com/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\"><span style=\"line-height: 1.5; font-size: 2rem;\">@</span><span style=\"line-height: 1.5; font-size: 2rem;\">Rising Stack Blog</span></a><span style=\"line-height: 1.5; font-size: 2rem;\"></span><span style=\"line-height: 1.5; font-size: 2rem;\">,&nbsp;</span><span style=\"line-height: 1.5; font-size: 2rem;\">Ref.: </span><a href=\"https://blog.risingstack.com/node-js-security-checklist/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">https://blog.risingstack.com/node-js-security-checklist/</a><br></p><p></p><p><br></p><p><br></p>','2016-05-28 18:04:20',4,'Published','nodejs, security, checklist'),
	(23,'Npm client leaked authentication tokens','<p>As <a href=\"http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability\">recently announced</a> the npm client supports installing packages from locations that are outside of the official npm registry (such as at HTTP urls). Due to a design flaw introduced in late 2014 the authentication bearer tokens used to authenticate the npm client with the registry were being sent along with all requests, not just to the official registry.</p><p>So, if you or one of the modules you use specified a dependency like the below example, your authentication token would be leaked to that location. Note this is not your password but a token representing that credential.</p><p>If that endpoint specified was HTTP and not HTTPS, that token was not transmitted securely and should be considered compromised.</p><p>During the time of the flaw there were 163 modules out of 250k+ modules that specified a remote package url that was not github.com or npm registry, these urls appear to be limited to 71 unique domains.</p><p>github.com itself would get tokens leaked to it for just over 5k modules. These modules may not today have a github.com reference, but did so for at least 1 publish during their life span.</p><p>So there is possibly a good chance that your token was leaked. But there are some very simple things you can do to take action.</p><h2>How to protect yourself</h2><p>First make sure you are running the updated and patched npm clients. The flaw has been fixed in <b><i>npm@2.15.1</i></b> and <b><i>npm@3.8.3</i></b></p><p>Run <b><i>npm --version</i></b> to see what version you are using.</p><p>The next thing you should do is go revoke your old tokens.</p><p>You do this by visiting <i><b>https://www.npmjs.com/settings/tokens</b></i></p><p>Note that if you have tokens in use by continuous integration or deployment systems they will have to be reconfigured as well. While it’s a hassle, it’s well worth the effort to ensure that tokens are protected.</p><p>Finally, if you want to see if you leaked a token to a url that’s not https://registry.npmjs.org here is a one liner that Node Security team member Nathan LaFreniere came up with. It will output “true” if any of the modules’ sources came from something other than <b><i>registry.npmjs.org</i></b>, and will list false if they all came from an official source.</p><p><br></p><p>Published by&nbsp;<a href=\"https://blog.liftsecurity.io/authors/adam-baldwin\">Adam Baldwin</a>,&nbsp;<a href=\"https://liftsecurity.io/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">@^lift</a>,&nbsp;<span style=\"line-height: 1.5; font-size: 2rem;\">Ref.: </span><a href=\"https://blog.liftsecurity.io/2016/03/31/npm-client-leaks-auth-tokens\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">https://blog.liftsecurity.io/2016/03/31/npm-client-leaks-auth-tokens</a></p>','2016-05-28 19:09:41',5,'Published','nodejs, authentication, security, leak'),
	(24,'Brute force protection','<p>Brute forcing is the systematically enumerating of all possible candidates a solution and checking whether each candidate satisfies the problems statement. In web applications a login endpoint can be the perfect candidate for this.</p><p>To protect your applications from these kind of attacks you have to implement some kind of rate-limiting. In Node.js you can use the <a href=\"https://www.npmjs.com/package/ratelimiter\">ratelimiter</a> package.</p><blockquote>var email = req.body.email;<br>  var limit = new Limiter({ id: email, db: db });<br>&nbsp; &nbsp; limit.get(function(err, limit) {<br>});</blockquote><p>Of course, you can wrap it into a middleware and just drop it into any application. Both Express and Koa has great middlewares for it.&nbsp;</p><p>What we did here is that we have limited how many times a user can try to login in a given time window - with this we can mitigate the risk of a successfully brute force attack. Please note, that these configurations have to be adjusted for each given application - do not directly copy-paste them.</p><p>To test how your services behave in these scenarios you can use <a href=\"https://github.com/vanhauser-thc/thc-hydra\">hydra</a>.</p><p><br></p><p>Published by&nbsp;<a href=\"https://blog.risingstack.com/author/gergely/\">Gergely Nemeth</a>,&nbsp;<a href=\"http://blog.risingstack.com/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">@Rising Stack Blog</a>,&nbsp;<span style=\"line-height: 1.5; font-size: 2rem;\">Ref.:&nbsp;</span><a href=\"https://blog.risingstack.com/node-js-security-checklist/\" style=\"line-height: 1.5; font-size: 2rem; background-color: rgb(255, 255, 255);\">https://blog.risingstack.com/node-js-security-checklist/</a></p>','2016-05-28 19:18:51',4,'Published','nodejs, security, authentication, bruteforce'),
	(25,'The battle for Node.js security has only begun','<p>The founder of the <a href=\"http://www.infoworld.com/article/2607982/node-js/article.html\">Node Security Project</a> says Node.js still has common vulnerabilities, but progress has been made to make it more secure.</p><p>Appearing at the recent <a href=\"http://www.infoworld.com/article/3027632/internet-of-things/node-could-bring-javascript-to-the-internet-of-things.html\">Node Community Convention in San Francisco</a>, project founder Adam Baldwin, chief security officer at Web consulting company &amp;yet, emphasized risks, protections, and progress.</p><p><span style=\"line-height: 1.5; font-size: 2rem;\">Baldwin sees four risks within the Node ecosystem pertinent to the enterprise: the code dependency tree, bugs, malicious actors, and people.&nbsp;</span></p><p>Baldwin said:<br></p><blockquote><span style=\"line-height: 1.5; font-size: 2rem; font-style: normal;\">I think of [the dependency tree] more as the dependency iceberg, to be honest&nbsp;</span><span style=\"font-size: 2rem; line-height: 1.5;\">where your code is the ship and your dependencies that you have with your packaged JSON is that little tiny iceberg at the top</span></blockquote><p><span style=\"font-size: 2rem; line-height: 1.5; color: rgb(85, 85, 85);\">But developers need to be aware of the \"<i>massive</i>\" iceberg underneath, he stressed.</span></p><p>The second risk is bugs in both code created and code consumed, Baldwin said. When used by the buffer, JavaScript can turn out uninitialized memory. \"<i>The enterprise perspective here is that if I use JavaScript, Im supposed to be protected from these low-level problems of dealing with memory initialization and all that,</i>\"&nbsp;<span style=\"line-height: 1.5; font-size: 2rem;\">noted Baldwin. The buffer problem can be protected against by leveraging the .fill function and checking the type of the first parameter when calling the new buffer. \"<i>It is a pattern that I dont think developers are aware of</i>,\" he said. \"<i>We have found it exploitable in production once over two years.</i>\"</span></p><p>The third risk and fourth risk categories -- malicious actors and people -- are closely related. The former deliberately upload malicious code, and the Node Security Project has an effort afoot to detect those modules, Baldwin said. With the latter, people, there may or may not be a malicious actor in the creation of modules. \"<i>I trust these people will write good code or at least not have malicious intent for my project</i>,\" said Baldwin. The point is not that people are untrustworthy or will write bad code, but the organization as a whole bears risk for bad security habits.</p><p>Baldwin offered risk mitigation strategies involving moving to npm onsite, auditing, white-listing modules, using the Node Security Project command-line tool, and changing passwords. As a general rule, Baldwin recommended that users \"<i>treat confidential information that you are in possession of with respect.</i>\"</p><p><br></p><p>Published by&nbsp;<a href=\"http://www.infoworld.com/author/Paul-Krill/\">Paul Krill</a>, <a href=\"http://www.infoworld.com/\">@InfoWolrd</a>, Ref.:&nbsp;<a href=\"http://www.infoworld.com/article/3029218/javascript/battle-for-nodejs-security-has-only-begun.html\">http://www.infoworld.com/article/3029218/javascript/battle-for-nodejs-security-has-only-begun.html</a></p>','2016-05-28 19:41:27',6,'Published','nodejs, security, battle'),
	(26,'February 2016 Security Release Summary','<p><b>Two weeks ago we announced the planned release of updates</b> to all active release lines, v0.10, v0.12, v4 and v5, to fix HTTP related vulnerabilities and to upgrade the bundled versions of OpenSSL.</p><p>Upon release of the OpenSSL updates we posted an impact assessment for Node.js users. We noted that the updates contained only one minor change that impacted Node.js users.</p><p>Today we have released Node.js v0.10.42 (Maintenance), v0.12.10 (LTS), v4.3.0 \"Argon\" (LTS) and v5.6.0 (Stable) with fixes for the announced vulnerabilities and updates to OpenSSL.</p><p>Please note that our LTS \"Argon\" release line has moved from v4.2.x to v4.3.x due to the security fixes enclosed. There will be no further updates to v4.2.x. Users are advised to upgrade to v4.3.0 as soon as possible.</p><p>For the purpose of understanding the impact that the fixed vulnerabilities have on your Node.js deployment and the urgency of the upgrades for your circumstances we are providing details below.</p><h2>CVE-2016-2086 Request Smuggling Vulnerability</h2><p>Régis Leroy reported defects in Node.js that can make request smuggling attacks possible under certain circumstances. To fix these defects, HTTP header parsing in Node.js, for both requests and responses, is moving closer to the formal HTTP specification in its handling of <i><u>Content-Length</u></i>.</p><p>While the impact of this vulnerability is application and network dependent, it is likely to be difficult to assess whether a Node.js deployment is vulnerable to attack. We therefore recommend that all users upgrade.</p><p><ul><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 0.10.x of Node.js are <b>vulnerable</b>, please upgrade to v0.10.42 (Maintenance).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 0.12.x of Node.js are <b>vulnerable</b>, please upgrade to v0.12.10 (LTS).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 4.x, including LTS Argon, of Node.js are <b>vulnerable</b>, please upgrade to v4.3.0 \"Argon\" (LTS).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 5.x of Node.js are <b>vulnerable</b>, please upgrade to v5.6.0 (Stable).</span><br></li></ul></p><h2>CVE-2016-2216 Response Splitting Vulnerability</h2><p>Сковорода Никита Андреевич (Nikita Skovoroda / @ChALkeR) and Amit Klein (of Safebreach) separately reported ways in which HTTP header parsing in Node.js can be used to perform response splitting attacks (new-line / CRLF injection). While Node.js has been protecting against response splitting attacks by checking for CRLF characters, it is possible to compose response headers using Unicode characters that decompose to these characters, bypassing the checks previously in place.</p><p>To fix this defect, HTTP header parsing in Node.js, for both requests and responses, is moving closer to the formal HTTP specification. HTTP headers containing characters outside of the valid set for tokens will be rejected. This check is performed for both requests and responses, for Node.js HTTP servers and clients.</p><p>It is possible that there exist Node.js applications that rely on the lax behaviour of HTTP header parsing for Node.js clients and/or servers. This change is therefore a breaking change that would normally be reserved for a semver-major version increment. However, as per our LTS policy, we are introducing this change as a semver-minor in Node.js v4 (hence the move from v4.2.x to v4.3.x) and v5 and semver-patch in v0.10 and v0.12.</p><p>Node.js LTS releases, v0.10.42, v0.12.10 and v4.3.0 (but not v5.6.0) also include a new command-line argument that can be used to turn off this new strict header parsing. By supplying --security-revert=CVE-2016-2216 when starting Node.js, the previous lenient HTTP header character checks will be used instead. Use of this option is not recommended and should only be used as a temporary migration tool where the implications of reverting the new behavior are fully understood.</p><p>We recommend that all users upgrade to receive this fix.</p><p><ul><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 0.10.x of Node.js are <b>vulnerable</b>, please upgrade to v0.10.42 (Maintenance).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 0.12.x of Node.js are <b>vulnerable</b>, please upgrade to v0.12.10 (LTS).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 4.x, including LTS Argon, of Node.js are <b>vulnerable</b>, please upgrade to v4.3.0 \"Argon\" (LTS).</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">Versions 5.x of Node.js are <b>vulnerable</b>, please upgrade to v5.6.0 (Stable).</span><br></li></ul><p><br></p><p>Published by&nbsp;Rod Vagg, <a href=\"https://nodejs.org/en/blog/\">@Node Security Blog</a>, Ref.:&nbsp;<a href=\"https://nodejs.org/en/blog/vulnerability/february-2016-security-releases/\">https://nodejs.org/en/blog/vulnerability/february-2016-security-releases/</a></p></p>','2016-05-28 20:06:04',3,'Published','nodejs, security, release'),
	(27,'OWASP Top 10 - 2016 Data Call Announcement','<p>The <a href=\"https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project\">OWASP Top 10 project</a> is launching its effort to update the Top 10 again. The current version was released in 2013, so this update is expected to be the 2016 or more likely 2017 release. This time around, we are making an open data call so anyone with application vulnerability statistics can contribute their data to the project.  To make it easier for the project to consume this contributed data, we are requesting it be provided via this Google form.</p><p><b><u>DEADLINE</u></b>: Data must be submitted by <u><b>July 20, 2016</b></u>.</p><p>As an OWASP project, we strive to make everything about every project as open as possible. For this release of the Top 10, we are going to publish all the contributed data so that anyone can review it to understand what input was considered to produce this update, and for other uses as well. We could imagine other groups/projects making use of this data for other reasons, so we believe publishing this data will have multiple benefits.</p><p><u><b>WARNING</b></u>: You acknowledge that by contributing data to this update of the Top 10, that you authorize its publication. <i>DO NOT CONTRIBUTE anything you don’t want to become public</i>.</p><p>Guidance on what data we are looking for:</p><p>We are looking for web application vulnerability statistics collected by your organization:</p><p><ul><li><span style=\"line-height: 1.5; font-size: 2rem;\">In web applications you assessed.</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">During the years 2014, 2015, or both.</span><br></li><li><span style=\"line-height: 1.5; font-size: 2rem;\">These vulnerabilities can be in the code itself, the libraries the applications use, or in the configuration of the environment the applications run in.</span><br></li></ul></p><p>We are NOT interested in OS, or network level vulnerabilities. We ARE interested in vulnerabilities in any SQL code running in any databases that back the applications being assessed and the database accounts used to run this code, but are generally NOT interested in security issues in the configuration of the database server itself.</p><p>Use your best judgment here to try to keep the data submitted relevant to the project. If you have a question or aren’t sure, just ask us for clarification.</p><p>There are 5 pages of questions, most of which are very short. The long one is page 4, which asks for all the vulnerability statistics. If you prefer, you can send your answers to the questions on page 4 via email to <u><i>dave.wichers@owasp.org</i></u> but please submit the rest of your input via this Google form.</p><p>If you want to see all the questions before filling out this form, they are all posted at: <a href=\"https://www.google.com/url?q=https://www.owasp.org/index.php/Top10%23tab%3DOWASP_Top_10_-_2016_Data_Call_Questions&amp;sa=D&amp;ust=1464480607273000&amp;usg=AFQjCNE6WxoEOT3UbcKrwNu_1wohJxrHbw\">https://www.owasp.org/index.php/Top10#tab=OWASP_Top_10_-_2016_Data_Call_Questions</a>.</p>','2016-05-28 20:13:20',1,'Published','owasp, top10, vulnerabilities');

/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT '',
  `password` varchar(40) DEFAULT NULL,
  `isAdmin` tinyint(1) DEFAULT NULL,
  `firstname` varchar(20) DEFAULT NULL,
  `lastname` varchar(20) DEFAULT NULL,
  `avatar` varchar(100) DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;

INSERT INTO `users` (`id`, `username`, `password`, `isAdmin`, `firstname`, `lastname`, `avatar`, `description`)
VALUES
	(1,'gonzalo','5EBE2294ECD0E0F08EAB7690D2A6EE69',0,'Gonzalo','Buszmicz','https://lh3.googleusercontent.com/-Te19dG4AnhI/AAAAAAAAAAI/AAAAAAAADtY/K7GRUoS1UZI/s46-c-k-no.jpg','First, make sure that the version of node you are using is a stable version. You\'ll know this because it\'ll have an even major release number'),
	(2,'admin','9a618248b64db62d15b300a07b00580b',1,'Administrator',NULL,'https://d1973c4qjhao9m.cloudfront.net/patches/sysadmin_253x292.png','There\'s no place like 127.0.0.1'),
	(3,'nodejs','5EBE2294ECD0E0F08EAB7690D2A6EE69',0,'Node','JS','http://humanos.uci.cu/wp-content/uploads/2014/10/nodejs-icon.png','Node.js® is a JavaScript runtime built on Chrome\'s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js\' package ecosystem, npm, is the largest ecosystem of open source libraries in the world'),
	(4,'risingstack','5EBE2294ECD0E0F08EAB7690D2A6EE69',0,'Rising','Stack','https://risingstack-blog.s3.amazonaws.com/2016/Mar/risingstack_logo-1457001742686.png','Engineering blog for all-the-things JavaScript/DevOps/IoT'),
	(5,'nodesecurity','5EBE2294ECD0E0F08EAB7690D2A6EE69',0,'Node','Security','https://avatars3.githubusercontent.com/u/4229593?v=3&s=200','Continuous Security monitoring for your node apps'),
	(6,'infoworld','5EBE2294ECD0E0F08EAB7690D2A6EE69',0,'Info','World','http://www.newsifi.com/images/iw.png','InfoWorld is the destination of choice for technology decision makers and business leaders who seek expert, in-depth analysis of enterprise technology. An independent voice best known for identifying important tech trends early, InfoWorld delivers unique insight drawn from the professional experience of a core group of thought leaders.');

/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
